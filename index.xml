<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intermediate Python Workshop - Dec 5, 2015 </title>
    <link>/</link>
    <description>Recent content on Intermediate Python Workshop - Dec 5, 2015 </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>01 Intro</title>
      <link>/01-Intro.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/01-Intro.html</guid>
      <description>

&lt;h2 id=&#34;this-workshop:98873e55c627754d1448de6a9077bcd9&#34;&gt;This Workshop&lt;/h2&gt;

&lt;p&gt;The goal of this workshop is to obtain a fundamental understanding of some of the more intermediate to advanced practices of the Python Programming language.&lt;/p&gt;

&lt;h2 id=&#34;about-me:98873e55c627754d1448de6a9077bcd9&#34;&gt;About Me&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Alex Jerez&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Long Time Coder and Linux user&lt;/li&gt;
&lt;li&gt;Launched Crosshatch: A content-sharing app, in 2011 and Zoanee Pro: A fitness membership site, in 2015&lt;/li&gt;
&lt;li&gt;Currently working as a Django Backend Developer for ABI Research in Oyster Bay, NY&lt;/li&gt;
&lt;li&gt;You can find me online &lt;strong&gt;@notalexjerez&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;requirements:98873e55c627754d1448de6a9077bcd9&#34;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A terminal environment running Python 2.7+&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A text editor or IDE (Sublime Text, PyCharm, etc)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you&amp;rsquo;ll be connecting to our server, you will need a terminal based editor like vim, nano, emacs&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-your-environment-and-activate-it:98873e55c627754d1448de6a9077bcd9&#34;&gt;Create your Environment and Activate it&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ mkvirtualenv pythonworkshop
$ workon pythonworkshop
(pythonworkshop)$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your terminal should have (mkvirtualenv) before the dollar sign.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now let&amp;rsquo;s go!!&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>02 Data Structures</title>
      <link>/02-DataStructures.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/02-DataStructures.html</guid>
      <description>

&lt;h2 id=&#34;the-list:6c3c8caa6c1b6efe364c1f1c44dae28b&#34;&gt;The List&lt;/h2&gt;

&lt;p&gt;A List is an unordered list of items that can be modified (mutable).  Lists might contain items of different types, but usually the items all have the same type.&lt;/p&gt;

&lt;p&gt;common list actions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;append()
remove()
pop()
index()
reverse()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;x = [3,6,8,3,8,5,35,54]

y = [[4,6,2], [7,9,4], [6,9,5]]

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-dictionary:6c3c8caa6c1b6efe364c1f1c44dae28b&#34;&gt;The Dictionary&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;dictionary&lt;/strong&gt; is an unordered set of key: value pairs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# create dictionary &#39;d&#39;

d = {&#39;firstname&#39;: &#39;Robert&#39;, &#39;age&#39;: 40, &#39;email&#39;: &#39;robert.smith@email.com&#39;}

&amp;gt;&amp;gt;&amp;gt; d[&#39;firstname&#39;]
&#39;Robert&#39;

# use a for loop to iterate over dictionary &#39;d&#39;


&amp;gt;&amp;gt;&amp;gt; for x in d:
...     print x
... 
age
email
firstname

# unpack d

&amp;gt;&amp;gt;&amp;gt; for x,y in d.items():
...     print x
...     print y
... 
age
40
email
robert.smith@email.com
firstname
Robert
&amp;gt;&amp;gt;&amp;gt; 


&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-tuple:6c3c8caa6c1b6efe364c1f1c44dae28b&#34;&gt;The Tuple&lt;/h2&gt;

&lt;p&gt;Tuples are an ordered list of items similar to a list, but cannot be modified (immutable), and usually contains an heterogeneous sequence of elements that are accessed via unpacking rather than iterating, like with lists.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; x, y, z = (12345, 54321, &#39;hello!&#39;)
&amp;gt;&amp;gt;&amp;gt; x
12345
&amp;gt;&amp;gt;&amp;gt; y
54321
&amp;gt;&amp;gt;&amp;gt; z
&#39;hello!&#39;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>03 Classes, Functions and Methods</title>
      <link>/03-ClassesMethodsFunctions.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/03-ClassesMethodsFunctions.html</guid>
      <description>

&lt;h2 id=&#34;functions:d03ab93178de607784a26d77dfb0842f&#34;&gt;Functions&lt;/h2&gt;

&lt;p&gt;a &lt;strong&gt;function&lt;/strong&gt; is a reusable &lt;strong&gt;user-defined action&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def sayHello():
    print &amp;quot;Hello&amp;quot;

def saysomething(x):
    print x

&amp;gt;&amp;gt;&amp;gt; def sayHello():
...     print &amp;quot;Hello&amp;quot;
... 
&amp;gt;&amp;gt;&amp;gt; def saysomething(x):
...     print x
... 
&amp;gt;&amp;gt;&amp;gt; sayHello()
Hello
&amp;gt;&amp;gt;&amp;gt; saysomething(&amp;quot;HEY&amp;quot;)
HEY
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;args-and-kwargs:d03ab93178de607784a26d77dfb0842f&#34;&gt;*args and **kwargs&lt;/h2&gt;

&lt;p&gt;adding *args and **kwargs to your function lets your function accept any argument. This is helpful for when you don&amp;rsquo;t know what variables you will be expecting.&lt;/p&gt;

&lt;p&gt;*args catches all positional arguments&lt;/p&gt;

&lt;p&gt;**kwargs catches all the keyword arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def printeverything(*args, **kwargs):
    for item in args:
        print item
    for key, value in kwargs.items():
        print key, value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function &lt;code&gt;printeverything()&lt;/code&gt; can now accept as many arguments and keyword arguments as you can throw at it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def printeverything(*args, **kwargs):
    for item in args:
        print item
    for key, value in kwargs.items():
        print key, value

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;classes-methods:d03ab93178de607784a26d77dfb0842f&#34;&gt;Classes &amp;amp; Methods&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;class TransportationVehicle(object):
     def __init__(self):
        self.wheels = None
        self.color = None
        self.brand = None

class Car(TransportationVehicle):
    def __init__(self, color, year, make):
        self.color = color
        self.year = year
        self.make = make

    def __repr__(self):
        return &amp;quot;this car is a %s %s %s&amp;quot; % (self.color,
                self.year,
                self.make)

    def about(self):
        print &amp;quot;this car is a %s %s %s&amp;quot; % (self.color,
                self.year,
                self.make)


&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;car_one = Car(&amp;quot;red&amp;quot;, 2005, &amp;quot;Toyota&amp;quot;)
car_two = Car(&amp;quot;black&amp;quot;, 2001, &amp;quot;Honda&amp;quot;)


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;static-methods:d03ab93178de607784a26d77dfb0842f&#34;&gt;Static Methods&lt;/h3&gt;

&lt;p&gt;a &lt;strong&gt;static method&lt;/strong&gt; is a function inside of your class that doesn&amp;rsquo;t depend on the class object. By adding a &lt;code&gt;@staticmethod&lt;/code&gt; decorator to your function, it becomes a static method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    @staticmethod
    def honk():
        print &amp;quot;HONK!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;class-methods:d03ab93178de607784a26d77dfb0842f&#34;&gt;Class Methods&lt;/h3&gt;

&lt;p&gt;a &lt;strong&gt;class method&lt;/strong&gt; is another type of function inside of your class that &lt;em&gt;has&lt;/em&gt; to take a class object as the first argument.&lt;/p&gt;

&lt;p&gt;Note that this is different from accepting an &lt;em&gt;instance&lt;/em&gt; of the class. This means that the function can return a class type that contains all the original functions and attributes.&lt;/p&gt;

&lt;p&gt;A common use case for class methods are for initializing classes under arbitrary conditions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@classmethod
def honkAndSay(cls, word):
    cls.honk()
    print word
 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>04 Errors &amp; Exceptions</title>
      <link>/04-ErrorsExceptions.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/04-ErrorsExceptions.html</guid>
      <description>

&lt;h3 id=&#34;syntax-errors:e43883508a7f99dd6933e5556c472b05&#34;&gt;Syntax Errors&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Syntax Errors&lt;/strong&gt; are Errors in your code that impair the Python interpreter&amp;rsquo;s ability to properly read your code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Example 1
#
#
#
&amp;gt;&amp;gt;&amp;gt; def sayHello():
...     print &amp;quot;hello
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 2
    print &amp;quot;hello
               ^
SyntaxError: EOL while scanning string literal
&amp;gt;&amp;gt;&amp;gt; 

#
#
#
# Example 2

&amp;gt;&amp;gt;&amp;gt; f = []
&amp;gt;&amp;gt;&amp;gt; print f
[]
&amp;gt;&amp;gt;&amp;gt; return f
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1
SyntaxError: &#39;return&#39; outside function


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;exceptions:e43883508a7f99dd6933e5556c472b05&#34;&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Exceptions&lt;/strong&gt; happen when your code is syntactically correct, but something went wrong while the code was being executed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
# AttributeError:

&amp;gt;&amp;gt;&amp;gt; w = &amp;quot;word&amp;quot;
&amp;gt;&amp;gt;&amp;gt; w
&#39;word&#39;
&amp;gt;&amp;gt;&amp;gt; w.append(&#39;hello&#39;)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
AttributeError: &#39;str&#39; object has no attribute &#39;append&#39;


# NameError:

&amp;gt;&amp;gt;&amp;gt; w = &amp;quot;word&amp;quot;
&amp;gt;&amp;gt;&amp;gt; print r
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &#39;r&#39; is not defined

# ZeroDivisionError:

&amp;gt;&amp;gt;&amp;gt; print 5/0
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
ZeroDivisionError: integer division or modulo by zero


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; to work around errors.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; phrase = &amp;quot;Hello&amp;quot;
&amp;gt;&amp;gt;&amp;gt; try:
...     phrase.append(&amp;quot; World&amp;quot;)
... except AttributeError:
...     phrase += &amp;quot; World&amp;quot;
... 
&amp;gt;&amp;gt;&amp;gt; print phrase
Hello World
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>05 Decorators</title>
      <link>/05-Decorators.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-Decorators.html</guid>
      <description>&lt;p&gt;A &lt;strong&gt;decorator&lt;/strong&gt; is a function that takes a function and returns a modified version of it.&lt;/p&gt;

&lt;p&gt;This can be useful for&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;wrapping a return value and do something with it&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Checking for conditions before executing a function&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Python Django framework has some good examples of decorators:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/1.8/topics/auth/default/#django.contrib.auth.decorators.login_required&#34;&gt;@login_required&lt;/a&gt;&lt;/em&gt; - added to functions that return a HTTP Response, makes sure the user is logged in before sending a HTTP Response. otherwise it will return a 404 Error.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/1.8/topics/cache/#the-per-view-cache&#34;&gt;@cache_page&lt;/a&gt;&lt;/em&gt; - will cache the results of the output of the function that it decorates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def add_exclamation(func):
    def inner(*args, **kwargs):
            result = str(func(*args, **kwargs)) + &amp;quot;!&amp;quot;
            return result
    return inner

@add_exclamation
def say(word):
    return word

def add(word):
    def wrapper(orig_func):
        def inner(*args, **kwargs):
            result = str(orig_func(*args, **kwargs)) + word
            return result
        return inner
    return wrapper

@add(&amp;quot;?&amp;quot;)
def sayWhat():
    return &amp;quot;What&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;[ &lt;a href=&#34;http://pythonhosted.org/decorator/documentation.html&#34;&gt;http://pythonhosted.org/decorator/documentation.html&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In Python, methods are functions that expect their first parameter to be a reference to the current object. We can build decorators for methods the same way, while taking self into consideration in the wrapper function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def p_decorate(func):
   def func_wrapper(self):
       return &amp;quot;&amp;lt;p&amp;gt;{0}&amp;lt;/p&amp;gt;&amp;quot;.format(func(self))
   return func_wrapper

class Person(object):
    def __init__(self):
        self.name = &amp;quot;John&amp;quot;
        self.family = &amp;quot;Doe&amp;quot;

    @p_decorate
    def get_fullname(self):
        return self.name+&amp;quot; &amp;quot;+self.family

my_person = Person()
print my_person.get_fullname()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A much better approach would be to make our decorator useful for functions and methods alike. This can be done by putting *args and **kwargs as parameters for the wrapper, then it can accept any arbitrary number of arguments and keyword arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def p_decorate(func):
   def func_wrapper(*args, **kwargs):
       return &amp;quot;&amp;lt;p&amp;gt;{0}&amp;lt;/p&amp;gt;&amp;quot;.format(func(*args, **kwargs))
   return func_wrapper

class Person(object):
    def __init__(self):
        self.name = &amp;quot;John&amp;quot;
        self.family = &amp;quot;Doe&amp;quot;

    @p_decorate
    def get_fullname(self):
        return self.name+&amp;quot; &amp;quot;+self.family

my_person = Person()

print my_person.get_fullname()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>06 Lunch</title>
      <link>/06-Lunch.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/06-Lunch.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>07 List Comprehensions</title>
      <link>/07-ListComprehensions.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/07-ListComprehensions.html</guid>
      <description>&lt;p&gt;&lt;sub&gt;(Excerpt from &lt;a href=&#34;https://docs.python.org/2/tutorial/datastructures.html&#34;&gt;Python&amp;rsquo;s Official Documentation&lt;/a&gt;)&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;List comprehensions&lt;/strong&gt; provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.&lt;/p&gt;

&lt;p&gt;For example, assume we want to create a list of squares, like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; squares = []
&amp;gt;&amp;gt;&amp;gt; for x in range(10):
...     squares.append(x**2)
...
&amp;gt;&amp;gt;&amp;gt; squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can obtain the same result with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;squares = [x**2 for x in range(10)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses.&lt;/strong&gt; The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it’s equivalent to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; combs = []
&amp;gt;&amp;gt;&amp;gt; for x in [1,2,3]:
...     for y in [3,1,4]:
...         if x != y:
...             combs.append((x, y))
...
&amp;gt;&amp;gt;&amp;gt; combs
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how the order of the for and if statements is the same in both these snippets.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>08 CSVs</title>
      <link>/08-CSVs.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/08-CSVs.html</guid>
      <description>&lt;p&gt;&lt;sub&gt; &lt;a href=&#34;https://docs.python.org/2/library/csv.html&#34;&gt;https://docs.python.org/2/library/csv.html&lt;/a&gt; &lt;/sub&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import csv
import sys

f = open(sys.argv[1], &#39;rw&#39;)
try:
    reader = csv.reader(f)
    for row in reader:
        print row
finally:
    f.close()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>09 Modules</title>
      <link>/09-Modules.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/09-Modules.html</guid>
      <description>

&lt;h2 id=&#34;python-based-toolkits:5e0ebd9c4f2cf515efd778496a6f9fc6&#34;&gt;Python-Based Toolkits&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;MLPY&lt;/strong&gt; - regression algorithms, classification, clustering&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;PyML&lt;/strong&gt; (pyml.sourceforge.net)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;PyBrain&lt;/strong&gt; (pybrain.org) - Neural Networks&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;nltk&lt;/strong&gt; (www.nltk.org) - focuses on NLP&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;matplotlib&lt;/strong&gt; (matplotlib.org) - 2D plotting&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;mdp-toolkit&lt;/strong&gt; (mdp-toolkit.sourceforge.net/) - modularized algorithms for data processing, parallelization&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;scikit-learn&lt;/strong&gt; (scikit-learn.org) - supervised learning, unsupervised learning, feature selection, regression, collections&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Orange&lt;/strong&gt; (&lt;a href=&#34;http://www.ailab.si/orange/&#34;&gt;http://www.ailab.si/orange/&lt;/a&gt;) - Statistical computing and data mining&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;c-c-implementations:5e0ebd9c4f2cf515efd778496a6f9fc6&#34;&gt;C/C++ Implementations&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;LIBLINEAR&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;LIBSVM&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;OpenCV&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;build-it-yourself:5e0ebd9c4f2cf515efd778496a6f9fc6&#34;&gt;Build it Yourself!&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;NumPy&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;SciPy&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pandas&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>11 Threading</title>
      <link>/10-Threading.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-Threading.html</guid>
      <description>

&lt;h2 id=&#34;global-variables:bd17743a4f2a0809eaae8ba786cb2f0e&#34;&gt;Global Variables&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Global variables&lt;/strong&gt; are variables that exist outside of a function that can be read and modified across multiple functions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;globvar = 0

def set_globvar_to_one():
    global globvar    # Needed to modify global copy of globvar
    globvar = 1

def print_globvar():
    print globvar     # No need for global declaration to read value of globvar

set_globvar_to_one()
print_globvar()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unless the global variable is explicitly declared within the function as &lt;em&gt;global&lt;/em&gt;, the global variable does not get modified anywhere outside of the scope of that function.&lt;/p&gt;

&lt;h2 id=&#34;the-thread-object:bd17743a4f2a0809eaae8ba786cb2f0e&#34;&gt;The Thread object&lt;/h2&gt;

&lt;p&gt;&lt;sub&gt; &lt;a href=&#34;https://docs.python.org/2/library/threading.html#thread-objects&#34;&gt;https://docs.python.org/2/library/threading.html#thread-objects&lt;/a&gt; &lt;/sub&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import threading
import time

var = 0 
lock = threading.Lock()

def countTo(num):
    global var 
    for number in range(num):
        var += 1
        print var
        time.sleep(1)

def Main():
    thread1 = threading.Thread(target=countTo, args=(5,))
    thread2 = threading.Thread(target=countTo, args=(8,))
    thread1.start()
    thread2.start()

    print &amp;quot;Main finished&amp;quot;

if __name__ == &amp;quot;__main__&amp;quot;:
    Main()

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-lock-object:bd17743a4f2a0809eaae8ba786cb2f0e&#34;&gt;the Lock Object&lt;/h2&gt;

&lt;p&gt;&lt;sub&gt; &lt;a href=&#34;https://docs.python.org/2/library/threading.html#lock-objects&#34;&gt;https://docs.python.org/2/library/threading.html#lock-objects&lt;/a&gt; &lt;/sub&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import threading
import time

var = 0 
lock = threading.Lock()

def countTo(num):
    global var 
    lock.acquire()
    for number in range(num):
        var += 1
        print var
        time.sleep(1)
    lock.release()
def Main():
    thread1 = threading.Thread(target=countTo, args=(5,))
    thread2 = threading.Thread(target=countTo, args=(8,))
    thread1.start()
    thread2.start()

    print &amp;quot;Main finished&amp;quot;

if __name__ == &amp;quot;__main__&amp;quot;:
    Main()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>11 Argparse</title>
      <link>/11-ArgParse.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/11-ArgParse.html</guid>
      <description>&lt;p&gt;A Great exanple of the use of argparse is the django-admin.py docs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ django-admin.py -h
Usage: django-admin.py subcommand [options] [args]

Options:
  -v VERBOSITY, --verbosity=VERBOSITY
                        Verbosity level; 0=minimal output, 1=normal output,
                        2=verbose output, 3=very verbose output
  --settings=SETTINGS   The Python path to a settings module, e.g.
                        &amp;quot;myproject.settings.main&amp;quot;. If this isn&#39;t provided, the
                        DJANGO_SETTINGS_MODULE environment variable will be
                        used.
  --pythonpath=PYTHONPATH
                        A directory to add to the Python path, e.g.
                        &amp;quot;/home/djangoprojects/myproject&amp;quot;.
  --traceback           Raise on exception
  --no-color            Don&#39;t colorize the command output.
  --version             show program&#39;s version number and exit
  -h, --help            show this help message and exit

Type &#39;django-admin.py help &amp;lt;subcommand&amp;gt;&#39; for help on a specific subcommand.

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;import argparse

parser = argparse.ArgumentParser(description=&amp;quot;calculate X to the power of Y&amp;quot;)
group = parser.add_mutually_exclusive_group()
group.add_argument(&amp;quot;-v&amp;quot;, &amp;quot;--verbose&amp;quot;, action=&amp;quot;store_true&amp;quot;)
group.add_argument(&amp;quot;-q&amp;quot;, &amp;quot;--quiet&amp;quot;, action=&amp;quot;store_true&amp;quot;)
parser.add_argument(&amp;quot;x&amp;quot;, type=int, help=&amp;quot;the base&amp;quot;)
parser.add_argument(&amp;quot;y&amp;quot;, type=int, help=&amp;quot;the exponent&amp;quot;)
args = parser.parse_args()
answer = args.x**args.y

if args.quiet:
    print answer
elif args.verbose:
    print &amp;quot;{} to the power {} equals {}&amp;quot;.format(args.x, args.y, answer)
else:
    print &amp;quot;{}^{} == {}&amp;quot;.format(args.x, args.y, answer)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>